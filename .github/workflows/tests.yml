name: Tests

on:
  push:
    branches:
      - master
      - develop
  pull_request:

jobs:

  Build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 20.11
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
          .eslintcache
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Install modules
      run: npm install
    - name: Build the package
      run: npm run build

  Docs-Build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 20.11
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
          .eslintcache
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Install modules
      run: npm install
    - name: Build the package
      run: npm run docs:build

  Docker-Build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Playground-Build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 20.11
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
          .eslintcache
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Install modules
      run: npm install
    - name: Build the package
      run: npm run play:build

  Code-Quality:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 20.11
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
          .eslintcache
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Install modules
      run: npm install
    - name: Run code quality tests
      run: npm run lint:eslint -- --format=compact
    - name: Run types tests
      run: npm run lint:types

  Unit:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 20.11
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
          .eslintcache
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Install modules
      run: npm install
    - name: Run tests
      run: npm run test -- -- --coverage --runInBand --ci || npm run test -- -- --coverage --runInBand --ci
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./packages/coverage
        flags: unittests
        fail_ci_if_error: false
        path_to_write_report: ./codecov_report.txt
        verbose: true

  Export-Size:
    runs-on: macos-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: titouanmathis/export-size-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build_script: npm run build-for-export-size
          paths: dist
          bundler: esbuild
          node-version: '18'

diff --git a/node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js b/node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js
index 6e086a4..868fced 100644
--- a/node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js
+++ b/node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js
@@ -5,322 +5,392 @@
  * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
  *-----------------------------------------------------------------------------*/
 
+import * as monaco_editor_core_star from '../../editor/editor.api.js';
+
+const __defProp = Object.defineProperty;
+const __getOwnPropDesc = Object.getOwnPropertyDescriptor;
+const __getOwnPropNames = Object.getOwnPropertyNames;
+const __hasOwnProp = Object.prototype.hasOwnProperty;
+const __copyProps = (to, from, except, desc) => {
+  if ((from && typeof from === 'object') || typeof from === 'function') {
+    for (const key of __getOwnPropNames(from))
+      if (!__hasOwnProp.call(to, key) && key !== except)
+        __defProp(to, key, {
+          get: () => from[key],
+          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
+        });
+  }
+  return to;
+};
+const __reExport = (target, mod, secondTarget) => (
+  __copyProps(target, mod, 'default'), secondTarget && __copyProps(secondTarget, mod, 'default')
+);
+
+// src/fillers/monaco-editor-core.ts
+const monaco_editor_core_exports = {};
+__reExport(monaco_editor_core_exports, monaco_editor_core_star);
+
+const EMPTY_ELEMENTS = [
+  'area',
+  'base',
+  'br',
+  'col',
+  'embed',
+  'hr',
+  'img',
+  'input',
+  'keygen',
+  'link',
+  'menuitem',
+  'meta',
+  'param',
+  'source',
+  'track',
+  'wbr',
+];
+
 // src/basic-languages/twig/twig.ts
-var conf = {
+const conf = {
   wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
   comments: {
-    blockComment: ["{#", "#}"]
+    blockComment: ['{#', '#}'],
   },
   brackets: [
-    ["{#", "#}"],
-    ["{%", "%}"],
-    ["{{", "}}"],
-    ["(", ")"],
-    ["[", "]"],
-    ["<!--", "-->"],
-    ["<", ">"]
+    ['{#', '#}'],
+    ['{%', '%}'],
+    ['{{', '}}'],
+    ['(', ')'],
+    ['[', ']'],
+    ['<!--', '-->'],
+    ['<', '>'],
   ],
   autoClosingPairs: [
-    { open: "{# ", close: " #}" },
-    { open: "{% ", close: " %}" },
-    { open: "{{ ", close: " }}" },
-    { open: "[", close: "]" },
-    { open: "(", close: ")" },
+    { open: '{# ', close: ' #}' },
+    { open: '{% ', close: ' %}' },
+    { open: '{{ ', close: ' }}' },
+    { open: '[', close: ']' },
+    { open: '(', close: ')' },
     { open: '"', close: '"' },
-    { open: "'", close: "'" }
+    { open: "'", close: "'" },
   ],
   surroundingPairs: [
     { open: '"', close: '"' },
     { open: "'", close: "'" },
-    { open: "<", close: ">" }
-  ]
+    { open: '<', close: '>' },
+  ],
+  onEnterRules: [
+    {
+      beforeText: /\s%}[^{%]*$/,
+      afterText: /^{%\s/,
+      action: {
+        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent,
+      },
+    },
+    {
+      beforeText: /\s%}[^{%]*$/,
+      action: {
+        indentAction: monaco_editor_core_exports.languages.IndentAction.Indent,
+      },
+    },
+    {
+      beforeText: new RegExp(
+        `<(?!(?:${EMPTY_ELEMENTS.join('|')}))([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$`,
+        'i',
+      ),
+      afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
+      action: {
+        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent,
+      },
+    },
+    {
+      beforeText: new RegExp(
+        `<(?!(?:${EMPTY_ELEMENTS.join('|')}))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$`,
+        'i',
+      ),
+      action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent },
+    },
+  ],
 };
-var language = {
-  defaultToken: "",
-  tokenPostfix: "",
+const language = {
+  defaultToken: '',
+  tokenPostfix: '',
   ignoreCase: true,
   keywords: [
-    "apply",
-    "autoescape",
-    "block",
-    "deprecated",
-    "do",
-    "embed",
-    "extends",
-    "flush",
-    "for",
-    "from",
-    "if",
-    "import",
-    "include",
-    "macro",
-    "sandbox",
-    "set",
-    "use",
-    "verbatim",
-    "with",
-    "endapply",
-    "endautoescape",
-    "endblock",
-    "endembed",
-    "endfor",
-    "endif",
-    "endmacro",
-    "endsandbox",
-    "endset",
-    "endwith",
-    "true",
-    "false"
+    'apply',
+    'autoescape',
+    'block',
+    'deprecated',
+    'do',
+    'embed',
+    'extends',
+    'flush',
+    'for',
+    'from',
+    'if',
+    'import',
+    'include',
+    'macro',
+    'sandbox',
+    'set',
+    'use',
+    'verbatim',
+    'with',
+    'endapply',
+    'endautoescape',
+    'endblock',
+    'endembed',
+    'endfor',
+    'endif',
+    'endmacro',
+    'endsandbox',
+    'endset',
+    'endwith',
+    'true',
+    'false',
   ],
   tokenizer: {
     root: [
       [/\s+/],
-      [/{#/, "comment.twig", "@commentState"],
-      [/{%[-~]?/, "delimiter.twig", "@blockState"],
-      [/{{[-~]?/, "delimiter.twig", "@variableState"],
-      [/<!DOCTYPE/, "metatag.html", "@doctype"],
-      [/<!--/, "comment.html", "@comment"],
-      [/(<)((?:[\w\-]+:)?[\w\-]+)(\s*)(\/>)/, ["delimiter.html", "tag.html", "", "delimiter.html"]],
-      [/(<)(script)/, ["delimiter.html", { token: "tag.html", next: "@script" }]],
-      [/(<)(style)/, ["delimiter.html", { token: "tag.html", next: "@style" }]],
-      [/(<)((?:[\w\-]+:)?[\w\-]+)/, ["delimiter.html", { token: "tag.html", next: "@otherTag" }]],
-      [/(<\/)((?:[\w\-]+:)?[\w\-]+)/, ["delimiter.html", { token: "tag.html", next: "@otherTag" }]],
-      [/</, "delimiter.html"],
-      [/[^<]+/]
+      [/{#/, 'comment.twig', '@commentState'],
+      [/{%[-~]?/, 'delimiter.twig', '@blockState'],
+      [/{{[-~]?/, 'delimiter.twig', '@variableState'],
+      [/<!DOCTYPE/, 'metatag.html', '@doctype'],
+      [/<!--/, 'comment.html', '@comment'],
+      [/(<)((?:[\w\-]+:)?[\w\-]+)(\s*)(\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']],
+      [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],
+      [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],
+      [/(<)((?:[\w\-]+:)?[\w\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
+      [/(<\/)((?:[\w\-]+:)?[\w\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
+      [/</, 'delimiter.html'],
+      [/[^<]+/],
     ],
     commentState: [
-      [/#}/, "comment.twig", "@pop"],
-      [/./, "comment.twig"]
+      [/#}/, 'comment.twig', '@pop'],
+      [/./, 'comment.twig'],
     ],
     blockState: [
-      [/[-~]?%}/, "delimiter.twig", "@pop"],
+      [/[-~]?%}/, 'delimiter.twig', '@pop'],
       [/\s+/],
       [
         /(verbatim)(\s*)([-~]?%})/,
-        ["keyword.twig", "", { token: "delimiter.twig", next: "@rawDataState" }]
+        ['keyword.twig', '', { token: 'delimiter.twig', next: '@rawDataState' }],
       ],
-      { include: "expression" }
+      { include: 'expression' },
     ],
     rawDataState: [
       [
         /({%[-~]?)(\s*)(endverbatim)(\s*)([-~]?%})/,
-        ["delimiter.twig", "", "keyword.twig", "", { token: "delimiter.twig", next: "@popall" }]
+        ['delimiter.twig', '', 'keyword.twig', '', { token: 'delimiter.twig', next: '@popall' }],
       ],
-      [/./, "string.twig"]
+      [/./, 'string.twig'],
     ],
-    variableState: [[/[-~]?}}/, "delimiter.twig", "@pop"], { include: "expression" }],
+    variableState: [[/[-~]?}}/, 'delimiter.twig', '@pop'], { include: 'expression' }],
     stringState: [
-      [/"/, "string.twig", "@pop"],
-      [/#{\s*/, "string.twig", "@interpolationState"],
-      [/[^#"\\]*(?:(?:\\.|#(?!\{))[^#"\\]*)*/, "string.twig"]
-    ],
-    interpolationState: [
-      [/}/, "string.twig", "@pop"],
-      { include: "expression" }
+      [/"/, 'string.twig', '@pop'],
+      [/#{\s*/, 'string.twig', '@interpolationState'],
+      [/[^#"\\]*(?:(?:\\.|#(?!\{))[^#"\\]*)*/, 'string.twig'],
     ],
+    interpolationState: [[/}/, 'string.twig', '@pop'], { include: 'expression' }],
     expression: [
       [/\s+/],
-      [/\+|-|\/{1,2}|%|\*{1,2}/, "operators.twig"],
-      [/(and|or|not|b-and|b-xor|b-or)(\s+)/, ["operators.twig", ""]],
-      [/==|!=|<|>|>=|<=/, "operators.twig"],
-      [/(starts with|ends with|matches)(\s+)/, ["operators.twig", ""]],
-      [/(in)(\s+)/, ["operators.twig", ""]],
-      [/(is)(\s+)/, ["operators.twig", ""]],
-      [/\||~|:|\.{1,2}|\?{1,2}/, "operators.twig"],
+      [/\+|-|\/{1,2}|%|\*{1,2}/, 'operators.twig'],
+      [/(and|or|not|b-and|b-xor|b-or)(\s+)/, ['operators.twig', '']],
+      [/==|!=|<|>|>=|<=/, 'operators.twig'],
+      [/(starts with|ends with|matches)(\s+)/, ['operators.twig', '']],
+      [/(in)(\s+)/, ['operators.twig', '']],
+      [/(is)(\s+)/, ['operators.twig', '']],
+      [/\||~|:|\.{1,2}|\?{1,2}/, 'operators.twig'],
       [
         /[^\W\d][\w]*/,
         {
           cases: {
-            "@keywords": "keyword.twig",
-            "@default": "variable.twig"
-          }
-        }
+            '@keywords': 'keyword.twig',
+            '@default': 'variable.twig',
+          },
+        },
       ],
-      [/\d+(\.\d+)?/, "number.twig"],
-      [/\(|\)|\[|\]|{|}|,/, "delimiter.twig"],
-      [/"([^#"\\]*(?:\\.[^#"\\]*)*)"|\'([^\'\\]*(?:\\.[^\'\\]*)*)\'/, "string.twig"],
-      [/"/, "string.twig", "@stringState"],
-      [/=>/, "operators.twig"],
-      [/=/, "operators.twig"]
+      [/\d+(\.\d+)?/, 'number.twig'],
+      [/\(|\)|\[|\]|{|}|,/, 'delimiter.twig'],
+      [/"([^#"\\]*(?:\\.[^#"\\]*)*)"|\'([^\'\\]*(?:\\.[^\'\\]*)*)\'/, 'string.twig'],
+      [/"/, 'string.twig', '@stringState'],
+      [/=>/, 'operators.twig'],
+      [/=/, 'operators.twig'],
     ],
     doctype: [
-      [/[^>]+/, "metatag.content.html"],
-      [/>/, "metatag.html", "@pop"]
+      [/[^>]+/, 'metatag.content.html'],
+      [/>/, 'metatag.html', '@pop'],
     ],
     comment: [
-      [/-->/, "comment.html", "@pop"],
-      [/[^-]+/, "comment.content.html"],
-      [/./, "comment.content.html"]
+      [/-->/, 'comment.html', '@pop'],
+      [/[^-]+/, 'comment.content.html'],
+      [/./, 'comment.content.html'],
     ],
     otherTag: [
-      [/\/?>/, "delimiter.html", "@pop"],
-      [/"([^"]*)"/, "attribute.value.html"],
-      [/'([^']*)'/, "attribute.value.html"],
-      [/[\w\-]+/, "attribute.name.html"],
-      [/=/, "delimiter.html"],
-      [/[ \t\r\n]+/]
+      [/\/?>/, 'delimiter.html', '@pop'],
+      [/"([^"]*)"/, 'attribute.value.html'],
+      [/'([^']*)'/, 'attribute.value.html'],
+      [/[\w\-]+/, 'attribute.name.html'],
+      [/=/, 'delimiter.html'],
+      [/[ \t\r\n]+/],
     ],
     script: [
-      [/type/, "attribute.name.html", "@scriptAfterType"],
-      [/"([^"]*)"/, "attribute.value.html"],
-      [/'([^']*)'/, "attribute.value.html"],
-      [/[\w\-]+/, "attribute.name.html"],
-      [/=/, "delimiter.html"],
+      [/type/, 'attribute.name.html', '@scriptAfterType'],
+      [/"([^"]*)"/, 'attribute.value.html'],
+      [/'([^']*)'/, 'attribute.value.html'],
+      [/[\w\-]+/, 'attribute.name.html'],
+      [/=/, 'delimiter.html'],
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@scriptEmbedded",
-          nextEmbedded: "text/javascript"
-        }
+          token: 'delimiter.html',
+          next: '@scriptEmbedded',
+          nextEmbedded: 'text/javascript',
+        },
       ],
       [/[ \t\r\n]+/],
       [
         /(<\/)(script\s*)(>)/,
-        ["delimiter.html", "tag.html", { token: "delimiter.html", next: "@pop" }]
-      ]
+        ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }],
+      ],
     ],
     scriptAfterType: [
-      [/=/, "delimiter.html", "@scriptAfterTypeEquals"],
+      [/=/, 'delimiter.html', '@scriptAfterTypeEquals'],
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@scriptEmbedded",
-          nextEmbedded: "text/javascript"
-        }
+          token: 'delimiter.html',
+          next: '@scriptEmbedded',
+          nextEmbedded: 'text/javascript',
+        },
       ],
       [/[ \t\r\n]+/],
-      [/<\/script\s*>/, { token: "@rematch", next: "@pop" }]
+      [/<\/script\s*>/, { token: '@rematch', next: '@pop' }],
     ],
     scriptAfterTypeEquals: [
       [
         /"([^"]*)"/,
         {
-          token: "attribute.value.html",
-          switchTo: "@scriptWithCustomType.$1"
-        }
+          token: 'attribute.value.html',
+          switchTo: '@scriptWithCustomType.$1',
+        },
       ],
       [
         /'([^']*)'/,
         {
-          token: "attribute.value.html",
-          switchTo: "@scriptWithCustomType.$1"
-        }
+          token: 'attribute.value.html',
+          switchTo: '@scriptWithCustomType.$1',
+        },
       ],
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@scriptEmbedded",
-          nextEmbedded: "text/javascript"
-        }
+          token: 'delimiter.html',
+          next: '@scriptEmbedded',
+          nextEmbedded: 'text/javascript',
+        },
       ],
       [/[ \t\r\n]+/],
-      [/<\/script\s*>/, { token: "@rematch", next: "@pop" }]
+      [/<\/script\s*>/, { token: '@rematch', next: '@pop' }],
     ],
     scriptWithCustomType: [
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@scriptEmbedded.$S2",
-          nextEmbedded: "$S2"
-        }
+          token: 'delimiter.html',
+          next: '@scriptEmbedded.$S2',
+          nextEmbedded: '$S2',
+        },
       ],
-      [/"([^"]*)"/, "attribute.value.html"],
-      [/'([^']*)'/, "attribute.value.html"],
-      [/[\w\-]+/, "attribute.name.html"],
-      [/=/, "delimiter.html"],
+      [/"([^"]*)"/, 'attribute.value.html'],
+      [/'([^']*)'/, 'attribute.value.html'],
+      [/[\w\-]+/, 'attribute.name.html'],
+      [/=/, 'delimiter.html'],
       [/[ \t\r\n]+/],
-      [/<\/script\s*>/, { token: "@rematch", next: "@pop" }]
+      [/<\/script\s*>/, { token: '@rematch', next: '@pop' }],
     ],
     scriptEmbedded: [
-      [/<\/script/, { token: "@rematch", next: "@pop", nextEmbedded: "@pop" }],
-      [/[^<]+/, ""]
+      [/<\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
+      [/[^<]+/, ''],
     ],
     style: [
-      [/type/, "attribute.name.html", "@styleAfterType"],
-      [/"([^"]*)"/, "attribute.value.html"],
-      [/'([^']*)'/, "attribute.value.html"],
-      [/[\w\-]+/, "attribute.name.html"],
-      [/=/, "delimiter.html"],
+      [/type/, 'attribute.name.html', '@styleAfterType'],
+      [/"([^"]*)"/, 'attribute.value.html'],
+      [/'([^']*)'/, 'attribute.value.html'],
+      [/[\w\-]+/, 'attribute.name.html'],
+      [/=/, 'delimiter.html'],
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@styleEmbedded",
-          nextEmbedded: "text/css"
-        }
+          token: 'delimiter.html',
+          next: '@styleEmbedded',
+          nextEmbedded: 'text/css',
+        },
       ],
       [/[ \t\r\n]+/],
       [
         /(<\/)(style\s*)(>)/,
-        ["delimiter.html", "tag.html", { token: "delimiter.html", next: "@pop" }]
-      ]
+        ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }],
+      ],
     ],
     styleAfterType: [
-      [/=/, "delimiter.html", "@styleAfterTypeEquals"],
+      [/=/, 'delimiter.html', '@styleAfterTypeEquals'],
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@styleEmbedded",
-          nextEmbedded: "text/css"
-        }
+          token: 'delimiter.html',
+          next: '@styleEmbedded',
+          nextEmbedded: 'text/css',
+        },
       ],
       [/[ \t\r\n]+/],
-      [/<\/style\s*>/, { token: "@rematch", next: "@pop" }]
+      [/<\/style\s*>/, { token: '@rematch', next: '@pop' }],
     ],
     styleAfterTypeEquals: [
       [
         /"([^"]*)"/,
         {
-          token: "attribute.value.html",
-          switchTo: "@styleWithCustomType.$1"
-        }
+          token: 'attribute.value.html',
+          switchTo: '@styleWithCustomType.$1',
+        },
       ],
       [
         /'([^']*)'/,
         {
-          token: "attribute.value.html",
-          switchTo: "@styleWithCustomType.$1"
-        }
+          token: 'attribute.value.html',
+          switchTo: '@styleWithCustomType.$1',
+        },
       ],
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@styleEmbedded",
-          nextEmbedded: "text/css"
-        }
+          token: 'delimiter.html',
+          next: '@styleEmbedded',
+          nextEmbedded: 'text/css',
+        },
       ],
       [/[ \t\r\n]+/],
-      [/<\/style\s*>/, { token: "@rematch", next: "@pop" }]
+      [/<\/style\s*>/, { token: '@rematch', next: '@pop' }],
     ],
     styleWithCustomType: [
       [
         />/,
         {
-          token: "delimiter.html",
-          next: "@styleEmbedded.$S2",
-          nextEmbedded: "$S2"
-        }
+          token: 'delimiter.html',
+          next: '@styleEmbedded.$S2',
+          nextEmbedded: '$S2',
+        },
       ],
-      [/"([^"]*)"/, "attribute.value.html"],
-      [/'([^']*)'/, "attribute.value.html"],
-      [/[\w\-]+/, "attribute.name.html"],
-      [/=/, "delimiter.html"],
+      [/"([^"]*)"/, 'attribute.value.html'],
+      [/'([^']*)'/, 'attribute.value.html'],
+      [/[\w\-]+/, 'attribute.name.html'],
+      [/=/, 'delimiter.html'],
       [/[ \t\r\n]+/],
-      [/<\/style\s*>/, { token: "@rematch", next: "@pop" }]
+      [/<\/style\s*>/, { token: '@rematch', next: '@pop' }],
     ],
     styleEmbedded: [
-      [/<\/style/, { token: "@rematch", next: "@pop", nextEmbedded: "@pop" }],
-      [/[^<]+/, ""]
-    ]
-  }
-};
-export {
-  conf,
-  language
+      [/<\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
+      [/[^<]+/, ''],
+    ],
+  },
 };
+export { conf, language };
